{"version":3,"sources":["components/Header.js","components/DisplayCode/index.js","code-formatter/helpers/splitStringIntoArrayOfStrings.js","code-formatter/helpers/addListTagToStartAndEndOfString.js","components/tabs/CssClass/DisplayStyle.js","components/tabs/CssClass/index.js","components/tabs/Button.js","components/radio/RadioButton.js","components/radio/index.js","components/tabs/Format/index.js","components/tabs/Instructions/index.js","components/tabs/Start/Checkbox.js","components/tabs/Start/RadioStart.js","components/tabs/Start/index.js","components/tabs/TabButton.js","components/tabs/index.js","code-formatter/index.js","components/page/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","memo","_ref","displayCode","displayCodeString","dangerouslySetInnerHTML","__html","splitStringIntoArrayOfStrings","str","split","addListTagToStartAndEndOfString","rowStartWith","rowEndWith","concat","DisplayStyle","style","listStyleType","CssClass","activeTab","id","display","margin","CssClass_DisplayStyle","Button","name","color","onClick","type","RadioButton","title","selectedRadio","onChange","radioName","value","checked","RadioButtons","radioFormat","handleRadioChange","radio_RadioButton","Format","handleAddColor","components_radio","tabs_Button","e","Instructions","Checkbox","RadioStart","radioJSX","radioStyle","Start_Checkbox","Start","handleSubmit","handleReset","Start_RadioStart","TabButton","handleSetActiveTab","tabName","event","Tabs","Fragment","tabs_TabButton","tabs_Start","tabs_Format","tabs_CssClass","tabs_Instructions","CodeFormatter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","target","isReadOnly","findAndReplace","UlTag","formatedStrings","selectedString","stringToBeModified","state","arrayOfStrings","numberOfLinesToFormat","length","index","replaceSlashes","trim","replace","startsWith","lessThan","endsWith","slash","modString","joinString","join","formatedStringTextArea","formatedStringDisplay","setupDisplay","stringValue","codePreviewValue","preventDefault","textAreaReplacement","classNameStyle","txtArea","document","getElementById","selectedTextStartIndex","selectionStart","selectedTextEndIndex","selectionEnd","selectedText","substring","textAreaValue","changeEvent","targetValue","stateObject","defineProperty","handleChange","bind","assertThisInitialized","formatedString","textAreaCode","components_tabs","readOnly","placeholder","width","DisplayCode","Component","Page","children","App","components_Header","components_page","code_formatter_CodeFormatter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d10eaa92.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h1>HTML Code Formatter</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst DisplayFormattedCode = ({ displayCodeString }) => {\r\n    let displayCode;\r\n    if (displayCodeString) {\r\n        displayCode = displayCodeString;\r\n    }\r\n    else {\r\n        displayCode = \"<span>Paste your code in the text area, then click on the submit button.</span>\";\r\n    }\r\n\r\n    // console.log(displayCode)\r\n\r\n    return (\r\n        <div className=\"margin-md\">\r\n            <h2 className=\"text-center\">Preview</h2>\r\n            <br />\r\n            <div className=\"list-style-none\">\r\n                <div dangerouslySetInnerHTML={{ __html: displayCode }} />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n// {displayCode}\r\n\r\nexport default React.memo(DisplayFormattedCode);\r\n\r\n","\r\nconst splitStringIntoArrayOfStrings = (str) => {\r\n    return str.split(/(?:\\r|\\n|\\r\\n)/g);\r\n}\r\n\r\nexport default splitStringIntoArrayOfStrings;","const addListTagToStartAndEndOfString = (str, rowStartWith, rowEndWith) => {\r\n    return rowStartWith.concat(str, rowEndWith);\r\n}\r\n\r\nexport default addListTagToStartAndEndOfString;","import React from 'react';\r\n\r\nconst DisplayStyle = () => {\r\n    return (\r\n        <div>\r\n            <ul style={{ listStyleType: 'none' }}>\r\n                <li>.bg-blue &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>background-color: blue;</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.c-white &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>color: white;</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.c-blue &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>color: blue</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.c-red &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>color: red;</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.c-green &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>color: green;</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.c-black &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>color: black;</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.f-bold &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>font-weight: bold;</li> </ul>\r\n                    }</li>\r\n                <li></li>\r\n                <li>.bd-color &#123;\r\n<ul style={{ listStyleType: 'none' }}>\r\n                        <li>border: solid;</li>\r\n                        <li>padding: 0 1px;</li> </ul>\r\n                    }</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayStyle;","import React from 'react';\r\nimport DisplayStyle from './DisplayStyle';\r\n\r\nconst CssClass = ({ activeTab }) => {\r\n    return (\r\n        <div id=\"css\" className=\"tabContent\" style={{ display: activeTab === 'CSS' ? \"block\" : \"none\" }}>\r\n            <h2 style={{ margin: 0 }}>CSS Code</h2>\r\n            <p style={{ margin: 0 }}>Copy and paste into your style sheet.</p>\r\n\r\n            <DisplayStyle />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CssClass;","import React from 'react';\r\n\r\nconst Button = ({ name, className, color, onClick }) => {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className={`btn ${className} ${color}`}\r\n            onClick={onClick}\r\n        >\r\n            {name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './radio.css';\r\n\r\nconst RadioButton = ({ title, selectedRadio, onChange, radioName }) => {\r\n    // console.log('button ', selectedRadio)\r\n\r\n    return (\r\n        <label className=\"radio\">{title}\r\n            <input\r\n                type=\"radio\" name={radioName}\r\n                value={title}\r\n                checked={selectedRadio === title}\r\n                onChange={onChange}\r\n            />\r\n            <span className=\"checkmark\"></span>\r\n        </label>\r\n\r\n    );\r\n}\r\n\r\nexport default RadioButton;","import React from 'react';\r\nimport './radio.css';\r\nimport RadioButton from './RadioButton';\r\n\r\nconst RadioButtons = ({ radioFormat, handleRadioChange }) => {\r\n    // console.log('radio format ', radioFormat)\r\n    return (\r\n        <div className=\"flexContainer margin-sm\">\r\n            <RadioButton\r\n                title=\"Color\" selectedRadio={radioFormat}\r\n                onChange={handleRadioChange}\r\n                radioName=\"radioFormat\"\r\n            />\r\n            <RadioButton\r\n                title=\"Border\" selectedRadio={radioFormat}\r\n                onChange={handleRadioChange}\r\n                radioName=\"radioFormat\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioButtons;\r\n\r\n\r\n","import React from 'react';\r\nimport Button from '../Button';\r\nimport RadioButtons from '../../radio';\r\n\r\nconst Format = ({ radioFormat, handleRadioChange, handleAddColor, activeTab }) => {\r\n    return (\r\n        <div id=\"menu\" className=\"tabContent\" style={{ display: activeTab === 'Format' ? \"block\" : \"none\" }}>\r\n            <p style={{ margin: 0 }}>Select some text, then click to change the text color</p>\r\n            <div className=\"flexContainer flex-vertical flex-warp\">\r\n                <RadioButtons\r\n                    radioFormat={radioFormat}\r\n                    handleRadioChange={handleRadioChange}\r\n                />\r\n                <div className=\"flexContainer flex-horizontal flex-warp\">\r\n                    <Button name=\"Red\" color=\"color-red\" onClick={(e) => handleAddColor(e, \"red\")} />\r\n                    <Button name=\"Blue\" color=\"color-blue\" onClick={(e) => handleAddColor(e, \"blue\")} />\r\n                    <Button name=\"Black\" color=\"color-black\" onClick={(e) => handleAddColor(e, \"black\")} />\r\n                    <Button name=\"Green\" color=\"color-green\" onClick={(e) => handleAddColor(e, \"green\")} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Format;","import React from 'react';\r\n\r\nconst Instructions = ({ activeTab }) => {\r\n    return (\r\n        <div id=\"instructions\" className=\"tabContent\" style={{ display: activeTab === 'Instructions' ? \"block\" : \"none\" }}>\r\n            <p style={{ margin: 0 }}>Tip:</p>\r\n            <ol><li>Go from right to left.</li></ol>\r\n            <p>Instructions</p>\r\n            <ol>\r\n                <li>Paste your code inside the text area.</li>\r\n                <li>Click on the \"Convert\" button below the text area</li>\r\n                <li>Select a word to color or add a border around it</li>\r\n                <li>Select the appropriate radio buttons</li>\r\n                <li>Click on the desired color button</li>\r\n            </ol>\r\n            <p>To Do:</p>\r\n            <ul>\r\n                <li>Add svg buttons or image, to save space</li>\r\n                <li>Add tool tip for svg button or image</li>\r\n                <li>Add word and list radio buttons instead of a tab</li>\r\n                <li>Add undo redo button</li>\r\n                <li>Add ability to insert a number in a circle (1,2,3)</li>\r\n                <li>Add inline stile with JSX, currently JSX only work with class</li>\r\n            </ul>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\r\n\r\nconst Checkbox = ({ title, selectedRadio, onChange, radioName }) => {\r\n    return (\r\n        <label className=\"radio\">{title}\r\n            <input\r\n                type=\"checkbox\"\r\n                value={title}\r\n                name={radioName}\r\n                onClick={onChange}\r\n            />\r\n            <span className=\"checkmark\"></span>\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport RadioButton from '../../radio/RadioButton';\r\nimport Checkbox from './Checkbox';\r\n\r\nconst RadioStart = ({ radioJSX, radioStyle, handleRadioChange }) => {\r\n    // console.log(selectedRadio, handleRadioChange)\r\n    return (\r\n        <div className=\"flexContainer margin-sm\">\r\n            <RadioButton\r\n                title=\"Style\" selectedRadio={radioStyle}\r\n                onChange={handleRadioChange}\r\n                radioName=\"radioStyle\"\r\n            />\r\n            <RadioButton\r\n                title=\"Class\" selectedRadio={radioStyle}\r\n                onChange={handleRadioChange}\r\n                radioName=\"radioStyle\"\r\n            />\r\n            <Checkbox\r\n                title=\"JSX\" selectedRadio={radioJSX}\r\n                onChange={handleRadioChange}\r\n                radioName=\"radioJSX\"\r\n            />\r\n            <span>(class only)</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioStart;\r\n\r\n\r\n","import React from 'react';\r\nimport Button from '../Button';\r\nimport RadioStart from './RadioStart';\r\n\r\nfunction Start({\r\n    handleRadioChange, handleSubmit,\r\n    handleReset, activeTab, radioJSX, radioStyle,\r\n\r\n}) {\r\n\r\n    return (\r\n        <div id=\"start\" className=\"tabContent\" style={{ display: activeTab === 'Start' ? \"block\" : \"none\" }}>\r\n            <p style={{ margin: 0 }}>Select some text, then click to change the text color</p>\r\n            <div className=\"flexContainer flex-vertical flex-warp\">\r\n                <RadioStart\r\n                    radioJSX={radioJSX}\r\n                    radioStyle={radioStyle}\r\n                    handleRadioChange={handleRadioChange}\r\n                />\r\n                <div className=\"flexContainer flex-horizontal flex-warp\">\r\n                    <Button name=\"Convert\" color=\"color-black\" onClick={(e) => handleSubmit()} />\r\n                    <Button name=\"Reset\" color=\"color-black\" onClick={(e) => handleReset()} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\n\r\nconst TabButton = ({ handleSetActiveTab, activeTab, tabName }) => {\r\n    return (\r\n        <button\r\n            className={`tablinks ${activeTab === tabName && 'active'}`}\r\n            value={tabName}\r\n            onClick={(event) => handleSetActiveTab(event, tabName)}\r\n            id=\"defaultOpen\"\r\n        >\r\n            {tabName}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default TabButton;","import React from 'react';\r\nimport './tabs.css';\r\nimport CssClass from './CssClass';\r\nimport Format from './Format';\r\nimport Instructions from './Instructions';\r\nimport Start from './Start';\r\nimport TabButton from './TabButton';\r\n\r\nconst Tabs = ({\r\n    handleSetActiveTab, activeTab, handleReset,\r\n    handleRadioChange, handleAddColor, handleSubmit,\r\n    radioFormat, radioJSX, radioStyle\r\n\r\n}) => {\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"tab\">\r\n                <TabButton\r\n                    handleSetActiveTab={handleSetActiveTab}\r\n                    activeTab={activeTab}\r\n                    tabName='Start'\r\n                />\r\n                <TabButton\r\n                    handleSetActiveTab={handleSetActiveTab}\r\n                    activeTab={activeTab}\r\n                    tabName='Format'\r\n                />\r\n                <TabButton\r\n                    handleSetActiveTab={handleSetActiveTab}\r\n                    activeTab={activeTab}\r\n                    tabName='CSS'\r\n                />\r\n                <TabButton\r\n                    handleSetActiveTab={handleSetActiveTab}\r\n                    activeTab={activeTab}\r\n                    tabName='Instructions'\r\n                />\r\n            </div>\r\n            <Start\r\n                activeTab={activeTab}\r\n                handleRadioChange={handleRadioChange}\r\n                handleAddColor={handleAddColor}\r\n                handleSubmit={handleSubmit}\r\n                handleReset={handleReset}\r\n\r\n                radioJSX={radioJSX}\r\n                radioStyle={radioStyle}\r\n            />\r\n            <Format\r\n                radioFormat={radioFormat}\r\n\r\n                handleRadioChange={handleRadioChange}\r\n                handleAddColor={handleAddColor}\r\n                activeTab={activeTab}\r\n\r\n            />\r\n            <CssClass activeTab={activeTab} />\r\n            <Instructions activeTab={activeTab} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Tabs;\r\n\r\n\r\n// <button className=\"tablinks\" onClick={(event) => this.openCity(event, 'list')}>List</button>\r\n//     <div id=\"list\" className=\"tabcontent\">\r\n//         <p style={{ margin: 0 }}>Select some list tag, then click to change its background color</p>\r\n//         <Button name=\"Red\" color=\"color-red\" />\r\n//         <Button name=\"Blue\" color=\"color-blue\" />\r\n//         <Button name=\"Black\" color=\"color-black\" />\r\n//         <Button name=\"Green\" color=\"color-green\" />\r\n//     </div>\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/inline-svg.css\"\r\nimport DisplayFormattedCode from \"../components/DisplayCode\";\r\nimport './styles/styling.css'\r\nimport splitStringIntoArrayOfStrings from \"./helpers/splitStringIntoArrayOfStrings\";\r\nimport addListTagToStartAndEndOfString from \"./helpers/addListTagToStartAndEndOfString\";\r\nimport Tabs from \"../components/tabs\";\r\n\r\nexport default class CodeFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.findAndReplace = this.findAndReplace.bind(this);\r\n        this.handleAddColor = this.handleAddColor.bind(this);\r\n        this.handleRadioChange = this.handleRadioChange.bind(this);\r\n        this.displayCodeString = \"\";\r\n\r\n        this.state = {\r\n            value: '',\r\n\r\n            radioFormat: 'Color',\r\n            radioJSX: '',\r\n            radioStyle: 'Style',\r\n\r\n            formatedString: '',\r\n            isReadOnly: false,\r\n            activeTab: 'Start',\r\n\r\n            textAreaCode: '',\r\n            codePreviewValue: ''\r\n        };\r\n    }\r\n\r\n    handleSetActiveTab = (event) => {\r\n        this.setState({\r\n            activeTab: event.target.value\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit() {\r\n        this.findAndReplace();\r\n    }\r\n    handleReset = () => {\r\n        this.displayCodeString = \"\"\r\n        this.setState(() => {\r\n            return {\r\n                isReadOnly: false,\r\n                value: '',\r\n                activeTab: 'Start'\r\n            }\r\n        })\r\n    }\r\n\r\n    findAndReplace = () => {\r\n        const lessThan = \"&#60;\";\r\n        const slash = \"&#47;\";\r\n        const UlTag = `<ul style=\"list-style-type:none\">`;\r\n        let formatedStrings = [];\r\n        let selectedString = \"\";\r\n        let rowStartWith = \"\";\r\n        let rowEndWith = \"\"\r\n        const stringToBeModified = this.state.value;\r\n        const arrayOfStrings = splitStringIntoArrayOfStrings(stringToBeModified);\r\n        const numberOfLinesToFormat = arrayOfStrings.length;\r\n\r\n        if (this.state.value) {\r\n            // make read only for security\r\n            this.setState(() => {\r\n                return {\r\n                    isReadOnly: true,\r\n                    activeTab: 'Format'\r\n                }\r\n            })\r\n\r\n            for (let index = 0; index < numberOfLinesToFormat; index++) {\r\n\r\n                selectedString = arrayOfStrings[index].trim();\r\n                const replaceSlashes = selectedString.replace(/\\//g, slash);\r\n                selectedString = replaceSlashes.replace(/</g, lessThan);\r\n\r\n                switch (true) {\r\n                    case selectedString.startsWith(\"}\") || selectedString.startsWith(\")\"):\r\n                        // } , )\r\n                        rowStartWith = \"</ul>\\n\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.startsWith(lessThan + slash) && selectedString.endsWith(\">\") && (selectedString.split(lessThan).length - 1) < 2:\r\n                        // </ tag >\r\n                        rowStartWith = \"</ul>\\n\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.startsWith(lessThan) && selectedString.endsWith(\">\") && (selectedString.split(lessThan).length - 1) > 1:\r\n                        // <tag> text </tag>\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.startsWith(lessThan) && selectedString.endsWith(slash + \">\") && (selectedString.split(lessThan).length - 1) < 2:\r\n                        // <tag/>\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.startsWith(lessThan) && !selectedString.endsWith(\"/>\") && selectedString.endsWith(\">\"):\r\n                        // <tag>\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"\\n\" + UlTag;\r\n                        break;\r\n                    case selectedString.startsWith(lessThan) && !selectedString.endsWith(\"/>\") && !selectedString.endsWith(\">\") && selectedString.split(\" \").length === 1:\r\n                        // <tag\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"\\n\" + UlTag;\r\n                        break;\r\n                    case selectedString.startsWith(slash + \">\") && selectedString.endsWith(slash + \">\"):\r\n                        //   /> \r\n                        rowStartWith = \"</ul>\\n\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.startsWith(\">\") && selectedString.endsWith(\">\"):\r\n                        //   >\r\n                        rowStartWith = \"</ul>\\n\";\r\n                        rowEndWith = \"</li>\\n\" + UlTag;\r\n                        break;\r\n\r\n                    case selectedString.startsWith(slash + slash):\r\n                        // \r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.endsWith(\"{\") || selectedString.endsWith(\"(\"):\r\n                        // text {  or  text (\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"\\n\" + UlTag;\r\n                        break;\r\n                    default:\r\n                        // li\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                }\r\n\r\n                let modString = addListTagToStartAndEndOfString(selectedString, rowStartWith, rowEndWith)\r\n                selectedString = modString;\r\n\r\n                modString = selectedString.replace(\"{\", \"&#123;\");\r\n                selectedString = modString;\r\n\r\n                formatedStrings[index] = selectedString;\r\n            }\r\n\r\n            let joinString = formatedStrings.join(' ');\r\n\r\n            // To do: fix style for JSX\r\n            // calculate string length difference between display and textarea value\r\n            // then calculate insert location.\r\n            // or replace all possible combinations\r\n            // const JsxStyle = `<ul style={{listStyleType:'none'}}>${joinString}\\n</ul>`;\r\n\r\n            const formatedStringTextArea = `<ul style=\"list-style-type:none\">${joinString}\\n</ul>`;\r\n            const formatedStringDisplay = `<ul style=\"list-style-type:none\">${joinString}\\n</ul>`\r\n\r\n            this.setupDisplay(formatedStringDisplay);\r\n\r\n            this.setState(() => { return { value: formatedStringTextArea }; });\r\n        }\r\n    }\r\n\r\n    setupDisplay = (stringValue) => {\r\n        this.setState({ codePreviewValue: stringValue });\r\n    }\r\n\r\n    handleAddColor = (event, color) => {\r\n        // To do: fix style for JSX\r\n        // calculate string length difference between display and textarea value\r\n        // then calculate insert location.\r\n        // or replace all possible combinations\r\n        // const JsxStyle = `<ul style={{listStyleType:'none'}}>${joinString}\\n</ul>`;\r\n\r\n        event.preventDefault();\r\n        let textAreaReplacement = \"\";\r\n        // let codePreviewReplacement = \"\";\r\n        let classNameStyle = 'class';\r\n        const txtArea = document.getElementById(\"codeTextarea\");\r\n        const selectedTextStartIndex = txtArea.selectionStart;\r\n        const selectedTextEndIndex = txtArea.selectionEnd;\r\n        const selectedText = txtArea.value.substring(selectedTextStartIndex, selectedTextEndIndex);\r\n        if (this.state.radioJSX === 'JSX') {\r\n            classNameStyle = 'className';\r\n        }\r\n        if (this.state.radioStyle === 'Style') {\r\n            switch (this.state.radioFormat) {\r\n                case 'Color':\r\n                    textAreaReplacement = `<span style=\"color:${color}; font-weight: bold\"> ${selectedText}</span>`;\r\n                    // codePreviewReplacement = `<span style=\"color:${color}; font-weight: bold\"> ${selectedText}</span>`;\r\n                    break;\r\n                case 'Border':\r\n                    textAreaReplacement = `<span style=\"border: solid ${color}; padding: 0 1px\"> ${selectedText}</span>`;\r\n                    // codePreviewReplacement = `<span style=\"border: solid ${color}; padding: 0 1px\"> ${selectedText}</span>`;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (this.state.radioFormat) {\r\n                case 'Color':\r\n                    textAreaReplacement = `<span ${classNameStyle}=\"c-${color} f-bold\"> ${selectedText}</span>`;\r\n                    // codePreviewReplacement = `<span class=\"c-${color} f-bold\"> ${selectedText}</span>`;\r\n                    break;\r\n                case 'Border':\r\n                    textAreaReplacement = `<span ${classNameStyle}=\"bd-color c-${color}\"> ${selectedText}</span>`;\r\n                    // codePreviewReplacement = `<span class=\"bd-color c-${color}\"> ${selectedText}</span>`;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const beforeSelectedText = txtArea.value.substring(0, selectedTextStartIndex);;\r\n        const afterSelectedText = txtArea.value.substring(selectedTextEndIndex);;\r\n\r\n        const textAreaValue = beforeSelectedText + textAreaReplacement + afterSelectedText;\r\n        let codePreviewValue = \"\";\r\n\r\n        if (this.state.radioJSX === 'JSX') {\r\n            codePreviewValue = textAreaValue.replace(/<span className=/g, \"<span class=\");\r\n        } else {\r\n            codePreviewValue = textAreaValue;\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {\r\n                value: textAreaValue,\r\n                codePreviewValue: codePreviewValue\r\n            }\r\n        });\r\n    }\r\n\r\n    handleRadioChange = (changeEvent) => {\r\n        let targetValue = changeEvent.target.value;\r\n        if (targetValue === 'JSX' && this.state.radioJSX === 'JSX') {\r\n            targetValue = '';\r\n        }\r\n        const stateObject = { [changeEvent.target.name]: targetValue }\r\n        this.setState(stateObject);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flexContainer flex-warp\">\r\n                <div className=\"formatter margin-md\">\r\n                    <h2 className=\"\">Format Javascript Code Using List</h2>\r\n                    <Tabs\r\n                        handleAddColor={this.handleAddColor}\r\n                        selectedRadio={this.state.selectedRadio}\r\n                        handleRadioChange={this.handleRadioChange}\r\n                        handleSubmit={this.handleSubmit}\r\n                        handleReset={this.handleReset}\r\n                        handleSetActiveTab={this.handleSetActiveTab}\r\n                        activeTab={this.state.activeTab}\r\n\r\n                        radioFormat={this.state.radioFormat}\r\n                        radioJSX={this.state.radioJSX}\r\n                        radioStyle={this.state.radioStyle}\r\n                    />\r\n                    <div className=\"formatter margin-top-sm\" >\r\n                        <textarea\r\n                            readOnly={this.state.isReadOnly}\r\n                            name=\"text\" id=\"codeTextarea\"\r\n                            className=\"texArea-height\" placeholder=\"Paste your code inside\"\r\n                            style={{ width: \"100%\" }} value={this.state.value}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n                <DisplayFormattedCode displayCodeString={this.state.codePreviewValue} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n// TO DO:\r\n// ADD SWITCH. (BREAK AND RETURN)\r\n// case selectedString.startsWith(\"case\") && selectedString.endsWith(\":\"):\r\n// // text {  or  text (\r\n// rowStartWith = \"\\n<li>\";\r\n// rowEndWith = \"\\n<ul>\";\r\n// break;\r\n\r\n// for return create a hasCase variable = false,\r\n// change to true if has case,\r\n// change to false after break or return.","import React from 'react';\r\nimport './styles/page.css';\r\n\r\nconst Page = (props) => {\r\n    return (\r\n        <div className={`flexContainer ${props.className ? props.className : \"\"}`}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Page;","import React, { Component } from 'react';\nimport './style/App.css';\nimport Header from './components/Header';\nimport CodeFormatter from './code-formatter';\nimport Page from './components/page';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Page className=\" flex-vertical\">\n          <CodeFormatter />\n        </Page>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}