{"version":3,"sources":["components/Header.js","components/DisplayCode/index.js","code-formatter/helpers/splitStringIntoArrayOfStrings.js","code-formatter/helpers/addListTagToStartAndEndOfString.js","components/tabs/CssClass/index.js","components/tabs/Button.js","components/radio/RadioButton.js","components/radio/index.js","components/tabs/Menu/index.js","components/tabs/Instructions/index.js","components/tabs/index.js","code-formatter/index.js","components/page/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","memo","_ref","displayCode","displayCodeString","dangerouslySetInnerHTML","__html","splitStringIntoArrayOfStrings","str","split","addListTagToStartAndEndOfString","rowStartWith","rowEndWith","concat","CssClass","activeTab","id","style","display","margin","Button","name","color","onClick","type","RadioButton","title","selectedRadio","onChange","value","checked","RadioButtons","handleRadioChange","radio_RadioButton","Menu","handleAddColor","components_radio","tabs_Button","e","Instructions","Tabs","state","handleSetActiveTab","event","console","log","_this","setState","target","openCity","evt","tabName","componentDidMount","_this2","this","Fragment","tabs_Menu","props","tabs_CssClass","tabs_Instructions","Component","CodeFormatter","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","findAndReplace","formatedStrings","selectedString","stringToBeModified","arrayOfStrings","numberOfLinesToFormat","length","index","replaceSlashes","trim","replace","startsWith","endsWith","modString","joinString","join","finalFormatedString","setupDisplay","preventDefault","selectionReplacement","txtArea","document","getElementById","selectedTextStartIndex","selectionStart","selectedTextEndIndex","selectionEnd","selectedText","substring","newText","changeEvent","handleChange","bind","assertThisInitialized","handleSubmit","elementList","formatedString","components_tabs","onSubmit","placeholder","width","DisplayCode","Page","children","App","components_Header","components_page","code_formatter_CodeFormatter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eabda7cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h1>HTML Code Formatter</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst DisplayFormattedCode = ({ displayCodeString }) => {\r\n    let displayCode;\r\n    if (displayCodeString) {\r\n        displayCode = displayCodeString;\r\n    }\r\n    else {\r\n        displayCode = \"<span>Paste your code in the text area, then click on the submit button.</span>\";\r\n    }\r\n\r\n    // console.log(displayCode)\r\n\r\n    return (\r\n        <div className=\"margin-md\">\r\n            <h2 className=\"text-center\">Preview</h2>\r\n            <br />\r\n            <div className=\"list-style-none\">\r\n                <div dangerouslySetInnerHTML={{ __html: displayCode }} />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n// {displayCode}\r\n\r\nexport default React.memo(DisplayFormattedCode);\r\n\r\n","\r\nconst splitStringIntoArrayOfStrings = (str) => {\r\n    return str.split(/(?:\\r|\\n|\\r\\n)/g);\r\n}\r\n\r\nexport default splitStringIntoArrayOfStrings;","const addListTagToStartAndEndOfString = (str, rowStartWith, rowEndWith) => {\r\n    return rowStartWith.concat(str, rowEndWith);\r\n}\r\n\r\nexport default addListTagToStartAndEndOfString;","import React from 'react';\r\n\r\nconst CssClass = ({ activeTab }) => {\r\n    return (\r\n        <div id=\"css\" className=\"tabcontent\" style={{ display: activeTab === 'CSS' ? \"block\" : \"none\" }}>\r\n            <p style={{ margin: 0 }}>Coming Soon</p>\r\n            <p>To Do:  Add radio button (jsx, style, class)</p>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CssClass;","import React from 'react';\r\n\r\nconst Button = ({ name, className, color, onClick }) => {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className={`btn ${className} ${color}`}\r\n            onClick={onClick}\r\n        >\r\n            {name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst RadioButton = ({ title, selectedRadio, onChange }) => {\r\n    // console.log(selectedRadio, onChange)\r\n\r\n    return (\r\n        <label className=\"radio\">{title}\r\n            <input\r\n                type=\"radio\" name=\"radio\"\r\n                value={title}\r\n                checked={selectedRadio === title}\r\n                onChange={onChange}\r\n            />\r\n            <span className=\"checkmark\"></span>\r\n        </label>\r\n\r\n    );\r\n}\r\n\r\nexport default RadioButton;","import React from 'react';\r\nimport './radio.css';\r\nimport RadioButton from './RadioButton';\r\n\r\nconst RadioButtons = ({ selectedRadio, handleRadioChange }) => {\r\n    // console.log(selectedRadio, handleRadioChange)\r\n    return (\r\n        <div className=\"margin-sm\">\r\n            <RadioButton\r\n                title=\"Color\" selectedRadio={selectedRadio}\r\n                onChange={handleRadioChange}\r\n            />\r\n            <RadioButton\r\n                title=\"Border\" selectedRadio={selectedRadio}\r\n                onChange={handleRadioChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioButtons;\r\n\r\n\r\n// <label className=\"radio\">Color\r\n// <input type=\"radio\" name=\"radio\" checked={selectedRadio === \"color\"} />\r\n//         <span className=\"checkmark\"></span>\r\n//     </label>\r\n","import React from 'react';\r\nimport Button from '../Button';\r\nimport RadioButtons from '../../radio';\r\n\r\nconst Menu = ({ selectedRadio, handleRadioChange, handleAddColor, activeTab }) => {\r\n    // let styleValue = null;\r\n    // if (activeTab === 'Menu') {\r\n    //     styleValue = { display: \"none\" }\r\n\r\n    // }\r\n    // console.log(activeTab)\r\n    return (\r\n        <div id=\"menu\" className=\"tabcontent\" style={{ display: activeTab === 'Menu' ? \"block\" : \"none\" }}>\r\n            <p style={{ margin: 0 }}>Select some text, then click to change the text color</p>\r\n            <div className=\"flexContainer flex-horizontal flex-warp\">\r\n                <RadioButtons\r\n                    selectedRadio={selectedRadio}\r\n                    handleRadioChange={handleRadioChange}\r\n                />\r\n                <Button name=\"Red\" color=\"color-red\" onClick={(e) => handleAddColor(e, \"red\")} />\r\n                <Button name=\"Blue\" color=\"color-blue\" onClick={(e) => handleAddColor(e, \"blue\")} />\r\n                <Button name=\"Black\" color=\"color-black\" onClick={(e) => handleAddColor(e, \"black\")} />\r\n                <Button name=\"Green\" color=\"color-green\" onClick={(e) => handleAddColor(e, \"green\")} />\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\n// <div id=\"instructions\" className=\"tabcontent\">\r\n\r\nconst Instructions = ({ activeTab }) => {\r\n    return (\r\n        <div id=\"instructions\" className=\"tabcontent\" style={{ display: activeTab === 'Instructions' ? \"block\" : \"none\" }}>\r\n\r\n            <p style={{ margin: 0 }}>Coming Soon</p>\r\n            <p>Instructions</p>\r\n            <ol>\r\n                <li>Paste your code inside the text area.</li>\r\n                <li>Click on the \"Convert\" button below the text area</li>\r\n                <li>Select a word to color or add a border around it</li>\r\n                <li>Select the appropriate radio buttons</li>\r\n                <li>Click on the desired color button</li>\r\n            </ol>\r\n            <p>To Do:</p>\r\n            <ul>\r\n                <li>Add svg buttons or image, to save space</li>\r\n                <li>Add tool tip for svg button or image</li>\r\n                <li>Add word and list radio buttons instead of a tab</li>\r\n                <li>Add undo redo button</li>\r\n                <li>Add ability to insert a number in a circle (1,2,3)</li>\r\n\r\n            </ul>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\r\nimport './tabs.css';\r\nimport CssClass from './CssClass';\r\nimport Menu from './Menu';\r\nimport Instructions from './Instructions';\r\n\r\nclass Tabs extends React.Component {\r\n    state = {\r\n        activeTab: 'Menu'\r\n    }\r\n\r\n    handleSetActiveTab = (event) => {\r\n        console.log(\"radio was called\")\r\n        this.setState({\r\n            activeTab: event.target.value\r\n        });\r\n    }\r\n\r\n    openCity = (evt, tabName) => {\r\n        // var i, tabcontent, tablinks;\r\n        // tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n        // for (i = 0; i < tabcontent.length; i++) {\r\n        //     tabcontent[i].style.display = \"none\";\r\n        // }\r\n        // tablinks = document.getElementsByClassName(\"tablinks\");\r\n        // for (i = 0; i < tablinks.length; i++) {\r\n        //     tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n        // }\r\n        // document.getElementById(tabName).style.display = \"block\";\r\n        // evt.currentTarget.className += \" active\";\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // Get the element with id=\"defaultOpen\" and click on it\r\n        // document.getElementById(\"defaultOpen\").click();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"tab\">\r\n                    <button className=\"tablinks\" value=\"Menu\" onClick={(event) => this.handleSetActiveTab(event, 'Menu')} id=\"defaultOpen\">Menu</button>\r\n                    <button className=\"tablinks\" value=\"CSS\" onClick={(event) => this.handleSetActiveTab(event, 'cssClass')}>CSS</button>\r\n                    <button className=\"tablinks\" value=\"Instructions\" onClick={(event) => this.handleSetActiveTab(event, 'instructions')}>Instructions</button>\r\n                </div>\r\n                <Menu\r\n                    selectedRadio={this.props.selectedRadio}\r\n                    handleRadioChange={this.props.handleRadioChange}\r\n                    handleAddColor={this.props.handleAddColor}\r\n                    activeTab={this.state.activeTab}\r\n                />\r\n                <CssClass activeTab={this.state.activeTab} />\r\n                <Instructions activeTab={this.state.activeTab} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Tabs;\r\n\r\n\r\n// <button className=\"tablinks\" onClick={(event) => this.openCity(event, 'list')}>List</button>\r\n//     <div id=\"list\" className=\"tabcontent\">\r\n//         <p style={{ margin: 0 }}>Select some list tag, then click to change its background color</p>\r\n//         <Button name=\"Red\" color=\"color-red\" />\r\n//         <Button name=\"Blue\" color=\"color-blue\" />\r\n//         <Button name=\"Black\" color=\"color-black\" />\r\n//         <Button name=\"Green\" color=\"color-green\" />\r\n//     </div>\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/inline-svg.css\"\r\nimport DisplayFormattedCode from \"../components/DisplayCode\";\r\nimport './styles/styling.css'\r\nimport splitStringIntoArrayOfStrings from \"./helpers/splitStringIntoArrayOfStrings\";\r\nimport addListTagToStartAndEndOfString from \"./helpers/addListTagToStartAndEndOfString\";\r\nimport Tabs from \"../components/tabs\";\r\n\r\nexport default class CodeFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.findAndReplace = this.findAndReplace.bind(this);\r\n        this.handleAddColor = this.handleAddColor.bind(this);\r\n        this.handleRadioChange = this.handleRadioChange.bind(this);\r\n\r\n        this.displayCodeString = \"\";\r\n\r\n        this.state = {\r\n            value: '',\r\n            elementList: [],\r\n            selectedRadio: 'Color',\r\n            formatedString: ''\r\n        };\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.findAndReplace();\r\n    }\r\n\r\n    findAndReplace = () => {\r\n        let formatedStrings = [];\r\n        let selectedString = \"\";\r\n        let rowStartWith = \"\";\r\n        let rowEndWith = \"\"\r\n        const stringToBeModified = this.state.value;\r\n        const arrayOfStrings = splitStringIntoArrayOfStrings(stringToBeModified);\r\n        const numberOfLinesToFormat = arrayOfStrings.length;\r\n\r\n        if (this.state.value) {\r\n\r\n            for (let index = 0; index < numberOfLinesToFormat; index++) {\r\n\r\n                selectedString = arrayOfStrings[index].trim();\r\n                const replaceSlashes = selectedString.replace(/\\//g, \"&#47;\");\r\n                selectedString = replaceSlashes.replace(\"<\", \"&#60;\");\r\n\r\n                switch (true) {\r\n                    case selectedString.startsWith(\"//\"):\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n\r\n                    case selectedString.startsWith(\"}\") || selectedString.startsWith(\")\"):\r\n                        rowStartWith = \"</ul>\\n\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    case selectedString.startsWith(\"&#60;\") && !selectedString.startsWith(\"&#60;&#47;\") && !selectedString.endsWith(\"/>\") && selectedString.endsWith(\">\"):\r\n                        // &#60; === <\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"\\n<ul>\";\r\n                        break;\r\n                    case selectedString.endsWith(\"{\") || selectedString.endsWith(\"(\"):\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"\\n<ul>\";\r\n                        break;\r\n                    case selectedString.startsWith(\"&#60;&#47;\") && selectedString.endsWith(\">\"):\r\n                        rowStartWith = \"</ul>\\n\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                    default:\r\n                        rowStartWith = \"\\n<li>\";\r\n                        rowEndWith = \"</li>\";\r\n                        break;\r\n                }\r\n\r\n                let modString = addListTagToStartAndEndOfString(selectedString, rowStartWith, rowEndWith)\r\n                selectedString = modString;\r\n\r\n                modString = selectedString.replace(\"{\", \"&#123;\");\r\n                selectedString = modString;\r\n\r\n                formatedStrings[index] = selectedString;\r\n            }\r\n\r\n            let joinString = formatedStrings.join(' ');\r\n            const finalFormatedString = `<ul className=\"list-style-none\">${joinString}\\n</ul>`\r\n\r\n            this.setupDisplay(finalFormatedString);\r\n\r\n            this.setState(() => { return { value: finalFormatedString }; });\r\n        }\r\n    }\r\n\r\n    setupDisplay = (finalFormatedString) => {\r\n        this.displayCodeString = finalFormatedString;\r\n    }\r\n\r\n    handleAddColor = (event, color) => {\r\n        event.preventDefault();\r\n        let selectionReplacement = \"\";\r\n        // console.log(event.target)\r\n        // console.dir(event.target);\r\n\r\n        const txtArea = document.getElementById(\"codeTextarea\");\r\n        const selectedTextStartIndex = txtArea.selectionStart;\r\n        const selectedTextEndIndex = txtArea.selectionEnd;\r\n        const selectedText = txtArea.value.substring(selectedTextStartIndex, selectedTextEndIndex);\r\n\r\n        switch (this.state.selectedRadio) {\r\n            case 'Color':\r\n                selectionReplacement = `<span style=\"color:${color}; font-weight: bold\"> ${selectedText}</span>`;\r\n                break;\r\n            case 'Border':\r\n                selectionReplacement = `<span style=\"border: solid ${color}; padding: 0 2px; font-weight: bold\"> ${selectedText}</span>`;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // const selectionReplacement = `<span style=\"background:${color}\"> ${selectedText}</span>`;\r\n\r\n        const beforeSelectedText = txtArea.value.substring(0, selectedTextStartIndex);;\r\n        const afterSelectedText = txtArea.value.substring(selectedTextEndIndex);;\r\n\r\n        // var selectedText = textarea.value.slice(start, end);\r\n        // var before = textarea.value.slice(0, start);\r\n        // var after = textarea.value.slice(end);\r\n\r\n        const newText = beforeSelectedText + selectionReplacement + afterSelectedText;\r\n        // textarea.value = text;\r\n\r\n        // const newText = this.displayCodeString.replace(selectedText, selectionReplacement);\r\n\r\n        document.getElementById(\"codeTextarea\").value = newText;\r\n        // console.log(newText)\r\n        this.displayCodeString = newText;\r\n        // this.setupDisplay(newText);\r\n        this.setState({ value: newText });\r\n\r\n\r\n    }\r\n    handleRadioChange = (changeEvent) => {\r\n        this.setState({\r\n            selectedRadio: changeEvent.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"flexContainer flex-warp\">\r\n                <div className=\"margin-md\">\r\n                    <h2 className=\"\">Format Javascript Code Using List</h2>\r\n                    <Tabs\r\n                        handleAddColor={this.handleAddColor}\r\n                        selectedRadio={this.state.selectedRadio}\r\n                        handleRadioChange={this.handleRadioChange}\r\n                    />\r\n                    <form className=\"formatter margin-top-sm\" onSubmit={this.handleSubmit}>\r\n                        <div >\r\n                            <textarea\r\n                                name=\"text\" id=\"codeTextarea\"\r\n                                className=\"texarea-height\" placeholder=\"Paste your code inside\"\r\n                                style={{ width: \"100%\" }} value={this.state.value}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div >\r\n                            <button type=\"submit\" value=\"Submit\" >Convert</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                </div>\r\n                <DisplayFormattedCode displayCodeString={this.displayCodeString} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// changeSelectedText = () => {\r\n//     console.log(\"test\");\r\n\r\n//     // obtain the object reference for the textarea>\r\n//     var txtArea = document.getElementById(\"codeTextarea\");\r\n//     // obtain the index of the first selected character\r\n//     var start = txtArea.selectionStart;\r\n//     // obtain the index of the last selected character\r\n//     var finish = txtArea.selectionEnd;\r\n//     //obtain all Text\r\n//     var allText = txtArea.value;\r\n\r\n//     // obtain the selected text\r\n//     var sel = allText.substring(start, finish);\r\n//     //append te text;\r\n//     var newText = allText.substring(0, start) + \"<center>\" + sel + \"</center>\" + allText.substring(finish, allText.length);\r\n\r\n//     console.log(newText);\r\n\r\n//     txtArea.value = newText;\r\n// }","import React from 'react';\r\nimport './styles/page.css';\r\n\r\nconst Page = (props) => {\r\n    return (\r\n        <div className={`flexContainer ${props.className ? props.className : \"\"}`}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Page;","import React, { Component } from 'react';\nimport './style/App.css';\nimport Header from './components/Header';\nimport CodeFormatter from './code-formatter';\nimport Page from './components/page';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Page className=\" flex-vertical\">\n          <CodeFormatter />\n        </Page>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}